{"id":"00654ce2-6688-4bb1-98e2-edadc0c92721","zed":"context","version":"0.4.0","text":"\n\n\nYou are a senior software engineering consultant with 15+ years of experience, specializing in:\n\nTechnical Expertise:\n- Cloud Infrastructure & DevOps\n  * AWS CDK, CloudFormation, and AWS best practices\n  * CI/CD pipelines and automation\n  * Infrastructure as Code (IaC)\n  * Container orchestration (Docker, Kubernetes)\n\nProgramming Languages & Frameworks:\n- Rust\n  * Systems programming and performance optimization\n  * Memory safety and concurrent programming\n  * Popular crates and ecosystem\n- Ruby\n  * Rails framework and web development\n  * Testing frameworks (RSpec, Minitest)\n  * Gem development and management\n- TypeScript\n  * Advanced type system features\n  * Node.js backend development\n  * Modern ES6+ features\n- React\n  * Modern React patterns (Hooks, Context)\n  * State management (Redux, MobX)\n  * Performance optimization\n  * Component architecture\n\nArchitecture & Design:\n- Microservices architecture\n- Domain-Driven Design\n- RESTful API design\n- Event-driven architecture\n- System scalability and reliability\n- Security best practices\n\nYou excel at:\n- Code review and quality assessment\n- Architectural decision making\n- Performance optimization\n- Technical debt management\n- Best practices and design patterns\n- Clear technical communication\n\nPlease provide practical, production-ready advice with concrete examples when possible.\nHow do I run tests in an vite app?\n# Running Tests in a Vite App\n\nVite doesn't include a testing solution out of the box, but it works well with several modern testing libraries. Here's how to set up and run tests in a Vite app:\n\n## Common Testing Setups for Vite\n\n### 1. Vitest (Recommended)\n\nVitest is the most seamless option as it's created by the same team behind Vite and leverages your existing Vite configuration.\n\n```bash\n# Install Vitest\nnpm install -D vitest\n```\n\nAdd to your `package.json`:\n\n```json\n\"scripts\": {\n  \"test\": \"vitest run\",\n  \"test:watch\": \"vitest\"\n}\n```\n\nCreate a `vitest.config.ts` file (or add to your existing `vite.config.ts`):\n\n```typescript\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    environment: 'jsdom',\n    globals: true,\n    setupFiles: './src/test/setup.ts',\n    // you can adjust coverage options here\n    coverage: {\n      reporter: ['text', 'json', 'html'],\n    }\n  }\n})\n```\n\n### 2. Jest with jest-environment-jsdom\n\nIf you prefer Jest:\n\n```bash\nnpm install -D jest @types/jest jest-environment-jsdom ts-jest\n```\n\nCreate a `jest.config.js`:\n\n```javascript\nmodule.exports = {\n  testEnvironment: 'jsdom',\n  transform: {\n    '^.+\\\\.tsx?$': 'ts-jest',\n  },\n  moduleNameMapper: {\n    // Handle CSS imports (with CSS modules)\n    '^.+\\\\.module\\\\.(css|sass|scss)$': 'identity-obj-proxy',\n    // Handle CSS imports (without CSS modules)\n    '^.+\\\\.(css|sass|scss)$': '<rootDir>/__mocks__/styleMock.js',\n    // Handle static assets\n    '^.+\\\\.(jpg|jpeg|png|gif|webp|svg)$': '<rootDir>/__mocks__/fileMock.js',\n    // Handle path aliases\n    '^@/(.*)$': '<rootDir>/src/$1'\n  },\n  setupFilesAfterEnv: ['<rootDir>/src/setupTests.ts'],\n}\n```\n\nAdd to `package.json`:\n\n```json\n\"scripts\": {\n  \"test\": \"jest\",\n  \"test:watch\": \"jest --watch\"\n}\n```\n\n## Testing React Components\n\nFor testing React components, you'll typically want React Testing Library:\n\n```bash\nnpm install -D @testing-library/react @testing-library/jest-dom @testing-library/user-event\n```\n\nAdd this to your setup file (e.g., `src/test/setup.ts` or `src/setupTests.ts`):\n\n```typescript\nimport '@testing-library/jest-dom'\n// Any other global setup\n```\n\nExample test:\n\n```typescript\n// src/components/Button.test.tsx\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport Button from './Button'\n\ntest('calls onClick when clicked', () => {\n  const handleClick = vi.fn() // use jest.fn() if using Jest\n  \n  render(<Button onClick={handleClick}>Click Me</Button>)\n  \n  fireEvent.click(screen.getByText('Click Me'))\n  \n  expect(handleClick).toHaveBeenCalledTimes(1)\n})\n```\n\n## Running Tests\n\n```bash\n# Run tests once\nnpm test\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Run with coverage\nnpm test -- --coverage\n```\n\n## Best Practices\n\n1. **Use component testing**: Focus on behavior, not implementation details.\n2. **Test hooks separately**: Use `@testing-library/react-hooks` for hook testing.\n3. **Mock external dependencies**: Use `vi.mock()` or `jest.mock()` to mock API calls.\n4. **Test user flows**: Test actual user interactions rather than internals.\n5. **Organize tests by features**: Structure tests to mirror your application features.\n\n## Advanced: CI/CD Integration\n\nIn your CI pipeline (GitHub Actions example):\n\n```yaml\nname: Test\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18\n          cache: 'npm'\n      - run: npm ci\n      - run: npm test\n```\n\nThis should get you up and running with testing in your Vite application. Let me know if you need help with specific test scenarios or more advanced configurations!\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":192}}},{"id":{"replica_id":0,"value":41},"start":1386,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":193}}},{"id":{"replica_id":0,"value":42},"start":5125,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":194}}}],"summary":"Running Vite App Tests","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":1350},"icon":"Library","label":"Software Engineer","metadata":null}]}