{"id":"a103d47d-f265-45c3-a301-eaaf5727c8ec","zed":"context","version":"0.4.0","text":"\n\n\nwhat actions are available in the actions param in gatsbys onCreatePage function?\nIn Gatsby's onCreatePage API function, the actions parameter provides several key actions that can be used to modify pages during the page creation process. The main actions include:\n\n1. createPage - Allows creating new pages programmatically\n2. deletePage - Enables deletion of pages\n3. createRedirect - Creates URL redirects\n4. createNode - Creates new nodes in the GraphQL data layer\n5. deleteNode - Removes nodes from the GraphQL data layer\n\nThe most commonly used action is `createPage`, which is used to programmatically create new pages.\n\nBasic usage example:\n```javascript\nexports.onCreatePage = ({ page, actions }) => {\n  const { createPage, deletePage } = actions\n  // Modify page properties or create new pages\n}\n```\n\nThese actions are part of Gatsby's Actions API and can be used to customize the page creation process. Each action has specific parameters and options available. For detailed and up-to-date documentation, I'd recommend checking Gatsby's official documentation.\nyou have 2 params in the function. \"page\" and \"actions\". what's in the \"actions\" object?\nThe `actions` object in Gatsby's `onCreatePage` function contains several methods. Here are the main ones:\n\n```javascript\nexports.onCreatePage = ({ page, actions }) => {\n  const {\n    createPage,     // Create a new page\n    deletePage,     // Delete a page\n    createRedirect, // Create URL redirects\n    setWebpackConfig, // Modify webpack config\n    setBabelPlugin,   // Add Babel plugins\n    setBabelPreset,   // Add Babel presets\n    createNodeField, // Add fields to nodes\n    deleteNode,      // Delete nodes\n    createNode,      // Create new nodes\n    touchNode,       // Prevent nodes from being garbage collected\n    replaceComponentQuery, // Replace page query\n  } = actions\n\n  // Use these actions...\n}\n```\n\nThe most commonly used actions are `createPage` and `deletePage`. For example:\n\n```javascript\nexports.onCreatePage = ({ page, actions }) => {\n  const { createPage, deletePage } = actions\n\n  // Delete the original page\n  deletePage(page)\n\n  // Create a new page with modified properties\n  createPage({\n    ...page,\n    path: '/new-path',\n    context: {\n      ...page.context,\n      someNewData: 'value'\n    }\n  })\n}\n```\n\nThis is not an exhaustive list, but these are the main actions available in the actions object.\nWhat params can I send into \"createPage\"?\nThe `createPage` action accepts an object with the following main parameters:\n\n```javascript\ncreatePage({\n  // Required parameters\n  path: '/my-page',          // The URL path for the page\n  component: require.resolve('./src/templates/my-template.js'), // Path to the component template\n\n  // Optional parameters\n  context: {                 // Data passed to the page as props\n    slug: 'my-post',\n    id: 123,\n    customData: 'value'\n  },\n  defer: false,             // Whether to defer page generation (for better build times)\n  ownerNodeId: `123`,       // Used for tracking the source of generated pages\n  matchPath: '/app/*',      // For client-only routes (like in SPAs)\n  \n  // Less commonly used\n  pluginCreator: {},        // Metadata about plugin that created the page\n  pluginCreatorId: 'plugin-name',\n  trailingSlash: 'always'   // Control trailing slashes in URLs\n})\n```\n\nCommon usage example:\n```javascript\nexports.createPages = async ({ actions }) => {\n  const { createPage } = actions\n\n  createPage({\n    path: '/blog/my-post',\n    component: require.resolve('./src/templates/blog-post.js'),\n    context: {\n      slug: 'my-post',\n      id: 123\n    }\n  })\n}\n```\n\nThe most important parameters are:\n- `path` (required): The URL path where the page will be accessible\n- `component` (required): The template component that will be used to render the page\n- `context`: Data that will be available in the page component and page query\n\nThe other parameters are used for more specific use cases like deferred static generation or client-side routing.\nI want to add tags to <head> in the page I create with creatPage, how do I do that?\nTo add tags to the `<head>` of a page created with `createPage`, you have a few options:\n\n1. Using React Helmet in the component template:\n```javascript\n// src/templates/my-template.js\nimport { Helmet } from 'react-helmet'\n\nconst MyTemplate = () => (\n  <>\n    <Helmet>\n      <title>My Page Title</title>\n      <meta name=\"description\" content=\"Page description\" />\n      <meta property=\"og:title\" content=\"My Page Title\" />\n    </Helmet>\n    {/* rest of your component */}\n  </>\n)\n```\n\n2. Using Gatsby Head API (recommended for Gatsby v4.19.0 and newer):\n```javascript\n// src/templates/my-template.js\nconst MyTemplate = () => (\n  /* your component content */\n)\n\n// Define head metadata\nexport const Head = () => (\n  <>\n    <title>My Page Title</title>\n    <meta name=\"description\" content=\"Page description\" />\n    <meta property=\"og:title\" content=\"My Page Title\" />\n  </>\n)\n\nexport default MyTemplate\n```\n\nIf you need dynamic head tags based on your page context:\n```javascript\n// src/templates/my-template.js\nconst MyTemplate = ({ pageContext }) => (\n  /* your component content */\n)\n\nexport const Head = ({ pageContext }) => (\n  <>\n    <title>{pageContext.title}</title>\n    <meta name=\"description\" content={pageContext.description} />\n    <meta property=\"og:title\" content={pageContext.title} />\n  </>\n)\n\nexport default MyTemplate\n```\n\nThe Gatsby Head API is the modern recommended approach as it's more performant than React Helmet.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":294}}},{"id":{"replica_id":0,"value":23},"start":85,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":295}}},{"id":{"replica_id":0,"value":24},"start":1075,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":296}}},{"id":{"replica_id":0,"value":99},"start":1164,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":297}}},{"id":{"replica_id":0,"value":100},"start":2401,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":298}}},{"id":{"replica_id":0,"value":165},"start":2443,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":299}}},{"id":{"replica_id":0,"value":166},"start":4004,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":300}}},{"id":{"replica_id":0,"value":273},"start":4088,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":301}}},{"id":{"replica_id":0,"value":274},"start":5528,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":302}}}],"summary":"Gatsby onCreatePage Actions API Reference","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null}]}